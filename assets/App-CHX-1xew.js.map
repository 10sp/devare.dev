{"version":3,"mappings":"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","names":["SearchBarWithLogo","promptEngine","promptEngines","useUserPreferences","mergedSearchEngines","AI_PROMPT_ENGINES","userSearchEngine","srchEngn","jsxs","jsx","HiSparkles","SearchBar","DNDLayout","cardsLayoutContainer","useRef","useLayoutEffect","onScrollToCardsLayoutClicked","_a","BsChevronDown","OnboardingModal","lazyImport","intersectionCallback","entries","entry","App","showOnboarding","setShowOnboarding","useState","onboardingCompleted","maxVisibleCards","isDNDModeActive","layout","DNDDuration","setDNDDuration","isOrganizeMode","userCustomCards","setUserCustomCards","cards","setCards","useEffect","setupAnalytics","setupIdentification","response","handleAddRssFeeds","error","feeds","getRssUrlFeed","__vitePreload","newCustomCards","newCards","feed","feedInfo","customCard","err","trackPageView","dndContent","observer","Fragment","isWebOrExtensionVersion","clsx","AppContentLayout"],"ignoreList":[],"sources":["../../src/components/Elements/SearchBarWithLogo/SearchBarWithLogo.tsx","../../src/components/Layout/DNDLayout/DNDLayout.tsx","../../src/App.tsx"],"sourcesContent":["import { HiSparkles } from 'react-icons/hi'\r\nimport { AI_PROMPT_ENGINES } from 'src/config/SearchEngines'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { SearchBar } from '../SearchBar/SearchBar'\r\nimport './SearchBarWithLogo.css'\r\n\r\nexport const SearchBarWithLogo = () => {\r\n  const { promptEngine, promptEngines } = useUserPreferences()\r\n  const mergedSearchEngines = [...AI_PROMPT_ENGINES, ...promptEngines]\r\n  const userSearchEngine =\r\n    mergedSearchEngines.find(\r\n      (srchEngn) => srchEngn.label.toLocaleLowerCase() === promptEngine.toLocaleLowerCase()\r\n    ) || mergedSearchEngines[0]\r\n\r\n  return (\r\n    <div className=\"searchBarWithLogo\">\r\n      {userSearchEngine.default === false ? (\r\n        <div className=\"searchEngineLogo\">\r\n          <HiSparkles />\r\n        </div>\r\n      ) : (\r\n        <img\r\n          className={'searchEngineLogo ' + userSearchEngine.className}\r\n          src={`/searchengine_logos/${userSearchEngine.label.toLowerCase()}_logo.svg`}\r\n        />\r\n      )}\r\n\r\n      <SearchBar />\r\n    </div>\r\n  )\r\n}\r\n","import { useLayoutEffect, useRef } from 'react'\r\nimport { BsChevronDown } from 'react-icons/bs'\r\nimport { SearchBarWithLogo } from 'src/components/Elements'\r\nimport './DNDLayout.css'\r\n\r\nexport const DNDLayout = () => {\r\n  const cardsLayoutContainer = useRef<HTMLElement | null>(null)\r\n\r\n  useLayoutEffect(() => {\r\n    cardsLayoutContainer.current = document.querySelector('.AppContent')\r\n  }, [])\r\n\r\n  const onScrollToCardsLayoutClicked = () => {\r\n    if (!cardsLayoutContainer.current) {\r\n      return\r\n    }\r\n    cardsLayoutContainer.current?.scrollIntoView({ behavior: 'smooth' })\r\n  }\r\n\r\n  return (\r\n    <section className=\"DNDContent\">\r\n      <div className=\"searchWidget\">\r\n        <SearchBarWithLogo />\r\n      </div>\r\n\r\n      <button className=\"scrollToCardsLayout\" onClick={() => onScrollToCardsLayoutClicked()}>\r\n        Scroll for Dev News\r\n        <BsChevronDown className=\"icon\" />\r\n      </button>\r\n    </section>\r\n  )\r\n}\r\n","import clsx from 'clsx'\r\nimport { useEffect, useLayoutEffect, useState } from 'react'\r\nimport { DNDLayout } from 'src/components/Layout'\r\nimport { setupAnalytics, setupIdentification, trackPageView } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { AppContentLayout } from './components/Layout'\r\nimport { isWebOrExtensionVersion } from './utils/Environment'\r\nimport { lazyImport } from './utils/lazyImport'\r\nconst { OnboardingModal } = lazyImport(() => import('src/features/onboarding'), 'OnboardingModal')\r\n\r\nconst intersectionCallback = (entries: IntersectionObserverEntry[]) => {\r\n  entries.forEach((entry) => {\r\n    if (!entry.isIntersecting) {\r\n      document.documentElement.classList.remove('dndState')\r\n    } else {\r\n      document.documentElement.classList.add('dndState')\r\n    }\r\n  })\r\n}\r\n\r\nexport const App = () => {\r\n  const [showOnboarding, setShowOnboarding] = useState(true)\r\n  const {\r\n    onboardingCompleted,\r\n    maxVisibleCards,\r\n    isDNDModeActive,\r\n    layout,\r\n    DNDDuration,\r\n    setDNDDuration,\r\n    isOrganizeMode,\r\n    userCustomCards,\r\n    setUserCustomCards,\r\n    cards,\r\n    setCards,\r\n  } = useUserPreferences()\r\n\r\n  useLayoutEffect(() => {\r\n    document.documentElement.style.setProperty('--max-visible-cards', maxVisibleCards.toString())\r\n  }, [maxVisibleCards])\r\n\r\n  useEffect(() => {\r\n    document.body.classList.remove('preload')\r\n    setupAnalytics()\r\n    setupIdentification()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // Check for RSS feeds to add (for browser extension)\r\n    if (typeof chrome !== 'undefined' && chrome.runtime) {\r\n      chrome.runtime\r\n        .sendMessage({ type: 'GET_RSS_FEEDS_TO_ADD' })\r\n        .then((response) => {\r\n          if (response && response.feeds && response.feeds.length > 0) {\r\n            handleAddRssFeeds(response.feeds)\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log('Not running in extension context or no feeds to add')\r\n        })\r\n    }\r\n  }, [])\r\n\r\n  const handleAddRssFeeds = async (feeds: Array<{ url: string; title: string; type: string }>) => {\r\n    try {\r\n      // Import the getRssUrlFeed function dynamically to avoid circular dependencies\r\n      const { getRssUrlFeed } = await import('src/features/cards')\r\n\r\n      // Process each feed\r\n      const newCustomCards = []\r\n      const newCards = []\r\n\r\n      for (const feed of feeds) {\r\n        try {\r\n          // Get feed information\r\n          const feedInfo = await getRssUrlFeed(feed.url)\r\n\r\n          const customCard = {\r\n            feedUrl: feed.url,\r\n            label: feedInfo.title || feed.title,\r\n            value: feedInfo.title.toLowerCase().replace(/\\s+/g, '-') || `rss-${Date.now()}`,\r\n            analyticsTag: feedInfo.title.toLowerCase().replace(/\\s+/g, '-') || `rss-${Date.now()}`,\r\n            link: feedInfo.link || feed.url,\r\n            type: 'rss',\r\n            icon: feedInfo.icon || 'ðŸ“°',\r\n          }\r\n\r\n          newCustomCards.push(customCard)\r\n\r\n          // Add to cards list\r\n          newCards.push({\r\n            id: cards.length + newCards.length,\r\n            name: customCard.value,\r\n            type: 'rss' as const,\r\n          })\r\n        } catch (err) {\r\n          console.error(`Error processing feed ${feed.url}:`, err)\r\n        }\r\n      }\r\n\r\n      // Update user preferences\r\n      if (newCustomCards.length > 0) {\r\n        setUserCustomCards([...userCustomCards, ...(newCustomCards as any)])\r\n        setCards([...cards, ...newCards])\r\n\r\n        // Show success message\r\n        alert(`Successfully added ${newCustomCards.length} RSS feed(s)!`)\r\n      }\r\n    } catch (err) {\r\n      console.error('Error adding RSS feeds:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    trackPageView('home', isDNDModeActive())\r\n    if (!isDNDModeActive() && DNDDuration !== 'never') {\r\n      setDNDDuration('never')\r\n    }\r\n  }, [DNDDuration, isDNDModeActive, setDNDDuration])\r\n\r\n  useLayoutEffect(() => {\r\n    let dndContent = document.querySelector('.DNDContent')\r\n    let observer = new IntersectionObserver(intersectionCallback, {\r\n      threshold: 0.1,\r\n    })\r\n\r\n    if (dndContent) {\r\n      observer.observe(dndContent)\r\n    } else {\r\n      document.documentElement.classList.remove('dndState')\r\n    }\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [DNDDuration])\r\n\r\n  return (\r\n    <>\r\n      {!onboardingCompleted && isWebOrExtensionVersion() === 'extension' && (\r\n        <OnboardingModal showOnboarding={showOnboarding} setShowOnboarding={setShowOnboarding} />\r\n      )}\r\n\r\n      <div\r\n        className={clsx(\r\n          'layoutLayers hideScrollBar',\r\n          layout === 'cards' ? 'cardsLayout' : 'gridLayout',\r\n          isOrganizeMode && 'organizeMode'\r\n        )}>\r\n        {isDNDModeActive() && <DNDLayout />}\r\n        <AppContentLayout />\r\n      </div>\r\n    </>\r\n  )\r\n}"],"file":"assets/App-CHX-1xew.js"}