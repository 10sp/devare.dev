{"version":3,"file":"index-BXmWFGie.js","sources":["../../src/components/placeholders/ProductHuntPlaceholder.tsx","../../src/utils/DataEnhancement.ts","../../src/features/cards/api/getConferences.ts","../../src/features/cards/components/conferencesCard/ConferenceItem.tsx","../../src/features/cards/components/conferencesCard/ConferencesCard.tsx","../../src/features/cards/api/getDevtoArticles.ts","../../src/features/cards/components/devtoCard/ArticleItem.tsx","../../src/features/cards/components/devtoCard/DevtoCard.tsx","../../src/features/cards/api/getFreeCodeCampArticles.ts","../../src/features/cards/components/freecodecampCard/ArticleItem.tsx","../../src/features/cards/components/freecodecampCard/FreecodecampCard.tsx","../../src/features/cards/api/getGithubRepos.ts","../../src/features/cards/components/githubCard/RepoItem.tsx","../../src/features/cards/components/githubCard/GithubCard.tsx","../../src/features/cards/api/getHackerNewsArticles.ts","../../src/features/cards/components/hackernewsCard/ArticleItem.tsx","../../src/features/cards/components/hackernewsCard/HackernewsCard.tsx","../../src/features/cards/api/getHashnodeArticles.ts","../../src/features/cards/components/hashnodeCard/ArticleItem.tsx","../../src/features/cards/components/hashnodeCard/HashnodeCard.tsx","../../src/features/cards/api/getIndieHackersArticles.ts","../../src/features/cards/components/indiehackersCard/ArticleItem.tsx","../../src/features/cards/components/indiehackersCard/IndiehackersCard.tsx","../../src/features/cards/api/getLobstersArticles.ts","../../src/features/cards/components/lobstersCard/ArticleItem.tsx","../../src/features/cards/components/lobstersCard/LobstersCard.tsx","../../src/features/cards/api/getMediumArticles.ts","../../src/features/cards/components/mediumCard/ArticleItem.tsx","../../src/features/cards/components/mediumCard/MediumCard.tsx","../../src/features/cards/api/getProductHuntProducts.ts","../../src/features/cards/components/producthuntCard/ArticleItem.tsx","../../src/features/cards/components/producthuntCard/ProducthuntCard.tsx","../../src/features/cards/api/getRedditArticles.ts","../../src/features/cards/components/redditCard/ArticleItem.tsx","../../src/features/cards/components/redditCard/RedditCard.tsx","../../src/components/Elements/FloatingFilter/FloatingFilter.tsx","../../src/components/DropDownMenu.tsx","../../src/components/Elements/InlineTextFilter/InlineTextFilter.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nexport const ProductHuntPlaceholder = () => {\r\n  return (\r\n    <div className=\"cardPlaceholder mediaCardPlaceholder\">\r\n      <span className=\"media\" />\r\n      <div className=\"cardContent\" style={{ marginRight: '20px' }}>\r\n        <span className=\"line\" />\r\n        <span className=\"smallLine\" />\r\n        <div className=\"details\">\r\n          <span className=\"detail\" />\r\n          <span className=\"detail\" style={{ width: '120px' }} />\r\n        </div>\r\n      </div>\r\n      <div className=\"cardUpvote\" />\r\n    </div>\r\n  )\r\n}\r\n","import { RemoteConfig, Tag, TagValuesFieldType } from 'src/features/remoteConfig'\r\nimport { BaseEntry } from 'src/types'\r\n\r\nexport const enhanceTags = (remoteConfigStore: RemoteConfig, tags: string[]): Tag[] => {\r\n  return tags\r\n    .map((tag) =>\r\n      remoteConfigStore.supportedTags.find((st) => st.value.toLowerCase() === tag.toLocaleString())\r\n    )\r\n    .filter(Boolean) as Tag[]\r\n}\r\n\r\nexport const getCardTagsValue = (tags: Tag[], valuesField: TagValuesFieldType): string[] => {\r\n  return tags.reduce((acc: string[], curr) => {\r\n    if (!curr[valuesField] || curr[valuesField].length === 0) return acc\r\n    acc = [...acc, ...curr[valuesField]]\r\n    return acc\r\n  }, [])\r\n}\r\n\r\nexport const filterUniqueEntries = (entries: BaseEntry[]) => {\r\n  const uniqueResults = new Map()\r\n  entries.forEach((item) => uniqueResults.set(item.id, item))\r\n  return Array.from(uniqueResults.values())\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Conference } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getConferences = async (tag: string): Promise<Conference[]> => {\r\n  return axios.get(`/data/v2/conferences/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getConferences\r\n\r\ntype UseGetConferencesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetConferences = ({ config, tags }: UseGetConferencesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Conference[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['conferences', tag],\r\n        queryFn: () => getConferences(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Conference } from 'src/types'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { ColoredLanguagesBadge } from 'src/components/Elements'\r\nimport { flag } from 'country-emoji'\r\nimport { IoIosPin } from 'react-icons/io'\r\nimport { RiCalendarEventFill } from 'react-icons/ri'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nconst ConferencesItem = ({ item, index, analyticsTag }: BaseItemPropsType<Conference>) => {\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  const ConferenceLocation = () => {\r\n    if (item.online) {\r\n      return '🌐 Online'\r\n    }\r\n    if (item.country) {\r\n      return `${flag(item.country.replace(/[^a-zA-Z ]/g, ''))} ${item.city}`\r\n    }\r\n  }\r\n\r\n  const ConferenceDate = () => {\r\n    if (!item.start_date) {\r\n      return ''\r\n    }\r\n    const monthNames = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ]\r\n    const startDate = new Date(item.start_date)\r\n    const startMnth = monthNames[startDate.getMonth()]\r\n    let value = `${startMnth} ${('0' + startDate.getDate()).slice(-2)}`\r\n    if (!item.end_date || item.end_date === item.start_date) {\r\n      return value\r\n    }\r\n    const endDate = new Date(item.end_date)\r\n    let endValue = ('0' + endDate.getDate()).slice(-2)\r\n    if (endDate.getMonth() !== startDate.getMonth()) {\r\n      endValue = `${monthNames[endDate.getMonth()]} ${endValue}`\r\n    }\r\n    return `${value} - ${endValue}`\r\n  }\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n            }}>\r\n            <RiCalendarEventFill className={'rowTitleIcon'} />\r\n            {item.title}\r\n          </CardLink>\r\n          {listingMode === 'normal' ? (\r\n            <>\r\n              <div className=\"rowDescription\">\r\n                <span className=\"rowItem\">\r\n                  <IoIosPin className=\"rowItemIcon\" /> {ConferenceLocation()}\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <MdAccessTime className=\"rowItemIcon\" /> {ConferenceDate()}\r\n                </span>\r\n              </div>\r\n              <div className=\"rowDetails\">\r\n                <ColoredLanguagesBadge languages={[item.tag]} />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"rowDescription\">\r\n              <span className=\"rowItem\">\r\n                <MdAccessTime className=\"rowItemIcon\" /> {ConferenceDate()}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ConferencesItem\r\n","import { Card } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { CardPropsType, Conference } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetConferences } from '../../api/getConferences'\r\nimport ConferenceItem from './ConferenceItem'\r\n\r\nexport function ConferencesCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags } = useUserPreferences()\r\n\r\n  const results = useGetConferences({ tags: getCardTagsValue(userSelectedTags, 'confsValues') })\r\n\r\n  const isLoading = results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results\r\n        .reduce((acc: Conference[], curr) => {\r\n          if (!curr.data) return acc\r\n          return [...acc, ...curr.data]\r\n        }, [])\r\n        .sort((a, b) => a.start_date - b.start_date)\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Conference, index: number) => (\r\n    <ConferenceItem\r\n      item={item}\r\n      key={`cf-${index}`}\r\n      index={index}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <ListComponent items={getData()} isLoading={isLoading} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (tag: string): Promise<Article[]> => {\r\n  return axios.get(`/data/v2/devto/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetDevtoArticles = ({ config, tags }: UseGetArticlesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Article[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['devto', tag],\r\n        queryFn: () => getArticles(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { format } from 'timeago.js'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { AiOutlineLike } from 'react-icons/ai'\r\nimport { ColoredLanguagesBadge } from 'src/components/Elements'\r\n\r\nconst ArticleItem = (props: BaseItemPropsType<Article>) => {\r\n  const { item, index, selectedTag, analyticsTag } = props\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.POINTS]: item.reactions,\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n              [Attributes.LANGUAGE]: selectedTag?.value,\r\n            }}>\r\n            {listingMode === 'compact' && (\r\n              <div className=\"counterWrapper\">\r\n                <AiOutlineLike />\r\n                <span className=\"value\">{item.reactions}</span>\r\n              </div>\r\n            )}\r\n            <div className=\"subTitle\">{item.title}</div>\r\n          </CardLink>\r\n\r\n          {listingMode === 'normal' && (\r\n            <>\r\n              <p className=\"rowDescription\">\r\n                <span className=\"rowItem\">\r\n                  <MdAccessTime className={'rowTitleIcon'} />\r\n                  {format(new Date(item.published_at))}\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <BiCommentDetail className={'rowTitleIcon'} />\r\n                  {item.comments} comments\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <AiOutlineLike className={'rowTitleIcon'} />\r\n                  {item.reactions} reactions\r\n                </span>\r\n              </p>\r\n              <p className=\"rowDetails\">\r\n                <ColoredLanguagesBadge languages={item.tags} />\r\n              </p>\r\n            </>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetDevtoArticles } from '../../api/getDevtoArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function DevtoCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.devtoValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'devtoValues')\r\n    }\r\n    return selectedTag.devtoValues\r\n  }\r\n\r\n  const results = useGetDevtoArticles({ tags: getQueryTags() })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results.reduce((acc: Article[], curr) => {\r\n        if (!curr.data) return acc\r\n        return [...acc, ...curr.data]\r\n      }, [])\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem\r\n      item={item}\r\n      key={`at-${index}`}\r\n      index={index}\r\n      analyticsTag={meta.analyticsTag}\r\n      selectedTag={selectedTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        {meta.label}\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['language']} />\r\n      <ListComponent items={getData()} isLoading={getIsLoading()} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (tag: string): Promise<Article[]> => {\r\n  return axios.get(`/data/v2/freecodecamp/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetFreeCodeCampArticles = ({ config, tags }: UseGetArticlesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Article[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['freecodecamp', tag],\r\n        queryFn: () => getArticles(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { format } from 'timeago.js'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { ColoredLanguagesBadge } from 'src/components/Elements'\r\n\r\nconst ArticleItem = (props: BaseItemPropsType<Article>) => {\r\n  const { item, index, selectedTag, analyticsTag } = props\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n              [Attributes.LANGUAGE]: selectedTag?.value,\r\n            }}>\r\n            <div className=\"subTitle\">{item.title}</div>\r\n          </CardLink>\r\n          <>\r\n            <p className=\"rowDescription\">\r\n              <span className=\"rowItem\">\r\n                <MdAccessTime className={'rowTitleIcon'} />\r\n                {format(new Date(item.published_at))}\r\n              </span>\r\n            </p>\r\n            <p className=\"rowDetails\">\r\n              <ColoredLanguagesBadge languages={item.tags.slice(0, 4)} />\r\n            </p>\r\n          </>\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetFreeCodeCampArticles } from '../../api/getFreeCodeCampArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function FreecodecampCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.freecodecampValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'freecodecampValues')\r\n    }\r\n    return selectedTag.freecodecampValues\r\n  }\r\n\r\n  const results = useGetFreeCodeCampArticles({ tags: getQueryTags() })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results\r\n        .reduce((acc: Article[], curr) => {\r\n          if (!curr.data) return acc\r\n          return [...acc, ...curr.data]\r\n        }, [])\r\n        .sort((a, b) => b.published_at - a.published_at)\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem\r\n      item={item}\r\n      key={`fcc-${index}`}\r\n      index={index}\r\n      selectedTag={selectedTag}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        {meta.label}\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['language']} />\r\n      <ListComponent items={getData()} isLoading={getIsLoading()} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Repository } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getRepos = async (tag: string, dateRange: string): Promise<Repository[]> => {\r\n  return axios.get(`/data/v2/github/${tag}/${dateRange}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getRepos\r\n\r\ntype UseGetReposOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n  dateRange: \"daily\" | \"monthly\" | \"weekly\"\r\n}\r\n\r\nexport const useGetGithubRepos = ({ config, tags, dateRange }: UseGetReposOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Repository[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['github', tag, dateRange],\r\n        queryFn: () => getRepos(tag, dateRange),\r\n      }\r\n    })\r\n  })\r\n}","import { CardLink, CardItemWithActions } from 'src/components/Elements'\r\n\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { ColoredLanguagesBadge } from 'src/components/Elements'\r\nimport { VscRepo, VscRepoForked, VscStarFull } from 'react-icons/vsc'\r\nimport { BaseItemPropsType, Repository } from 'src/types'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nfunction numberWithCommas(x: number | string) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\r\n}\r\n\r\nconst RepoItem = ({ item, index, selectedTag, analyticsTag }: BaseItemPropsType<Repository>) => {\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      key={index}\r\n      index={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            className=\"githubTitle\"\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.POINTS]: item.stars,\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n              [Attributes.LANGUAGE]: selectedTag?.value,\r\n            }}>\r\n            <VscRepo className={'rowTitleIcon'} />\r\n            {item.title}\r\n          </CardLink>\r\n          <p className=\"rowDescription\">{item.description}</p>\r\n          {listingMode === 'normal' && (\r\n            <div className=\"rowDetails\">\r\n              <ColoredLanguagesBadge languages={[item.programmingLanguage]} />\r\n              {numberWithCommas(item.stars) && (\r\n                <span className=\"rowItem\">\r\n                  <VscStarFull className=\"rowItemIcon\" /> {numberWithCommas(item.stars)} stars\r\n                </span>\r\n              )}\r\n              {item.forks && (\r\n                <span className=\"rowItem\">\r\n                  <VscRepoForked className=\"rowItemIcon\" /> {numberWithCommas(item.forks)} forks\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default RepoItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG, dateRanges } from 'src/config'\r\nimport { trackCardDateRangeSelect, trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { CardPropsType, Repository } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetGithubRepos } from '../../api/getGithubRepos'\r\nimport RepoItem from './RepoItem'\r\n\r\nexport function GithubCard(props: CardPropsType) {\r\n  const { meta, knob } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const selectedDateRange =\r\n    dateRanges.find((date) => date.value === cardsSettings?.[meta.value]?.dateRange) ||\r\n    dateRanges[0]\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag?.githubValues) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.githubValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'githubValues')\r\n    }\r\n    return selectedTag.githubValues\r\n  }\r\n\r\n  const results = useGetGithubRepos({\r\n    tags: getQueryTags(),\r\n    dateRange: selectedDateRange.value,\r\n    config: {\r\n      enabled: !!selectedTag?.githubValues,\r\n    },\r\n  })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results.reduce((acc: Repository[], curr) => {\r\n        if (!curr.data) return acc\r\n        return [...acc, ...curr.data]\r\n      }, [])\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Repository, index: number) => (\r\n    <RepoItem\r\n      item={item}\r\n      key={`rp-${index}`}\r\n      index={index}\r\n      selectedTag={selectedTag}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n        Repos of\r\n        <InlineTextFilter\r\n          options={dateRanges}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], dateRange: item.value })\r\n            trackCardDateRangeSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.dateRange}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getError = () => {\r\n    if (!selectedTag?.githubValues) {\r\n      return `Github Trending does not support ${selectedTag?.label || 'the selected tag'}.`\r\n    } else if (results.every((result) => result.isError)) {\r\n      return 'Failed to load Github trending repositories'\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n  return (\r\n    <Card fullBlock={true} titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['datesRange', 'language']} />\r\n      <ListComponent\r\n        items={getData()}\r\n        error={getError()}\r\n        isLoading={getIsLoading()}\r\n        renderItem={renderItem}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQuery } from '@tanstack/react-query'\r\nimport { ExtractFnReturnType, QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (): Promise<Article[]> => {\r\n  return axios.get('/data/v2/hackernews.json')\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n}\r\n\r\nexport const useGetHackertNewsArticles = ({ config }: UseGetArticlesOptions = {}) => {\r\n  return useQuery<ExtractFnReturnType<QueryFnType>>({\r\n    ...config,\r\n    queryKey: ['hackernews'],\r\n    queryFn: () => getArticles(),\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { GoDotFill } from 'react-icons/go'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { VscTriangleUp } from 'react-icons/vsc'\r\nimport { CardItemWithActions, CardLink, ClickableItem } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, BaseItemPropsType } from 'src/types'\r\nimport { format } from 'timeago.js'\r\n\r\nconst ArticleItem = (props: BaseItemPropsType<Article>) => {\r\n  const { item, index, analyticsTag } = props\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      item={item}\r\n      key={index}\r\n      cardItem={\r\n        <>\r\n          <p className=\"rowTitle\">\r\n            <CardLink\r\n              link={item.url}\r\n              analyticsAttributes={{\r\n                [Attributes.POINTS]: item.reactions,\r\n                [Attributes.TRIGERED_FROM]: 'card',\r\n                [Attributes.TITLE]: item.title,\r\n                [Attributes.LINK]: item.url,\r\n                [Attributes.SOURCE]: analyticsTag,\r\n              }}>\r\n              {listingMode === 'compact' && (\r\n                <span className=\"counterWrapper\">\r\n                  <VscTriangleUp />\r\n                  <span className=\"value\">{item.reactions}</span>\r\n                </span>\r\n              )}\r\n\r\n              <span className=\"subTitle\">{item.title}</span>\r\n            </CardLink>\r\n          </p>\r\n          {listingMode === 'normal' && (\r\n            <div className=\"rowDetails\">\r\n              <span className=\"rowItem hnRowItem\">\r\n                <GoDotFill className=\"rowItemIcon\" /> {item.reactions} points\r\n              </span>\r\n              <span className=\"rowItem\" title={new Date(item.published_at).toUTCString()}>\r\n                <MdAccessTime className=\"rowItemIcon\" /> {format(new Date(item.published_at))}\r\n              </span>\r\n              <ClickableItem\r\n                link={`https://news.ycombinator.com/item?id=${item.id}`}\r\n                className=\"rowItem rowItemClickable\"\r\n                analyticsAttributes={{\r\n                  [Attributes.POINTS]: item.reactions,\r\n                  [Attributes.TRIGERED_FROM]: 'card',\r\n                  [Attributes.TITLE]: `${item.title} comments`,\r\n                  [Attributes.LINK]: `https://news.ycombinator.com/item?id=${item.id}`,\r\n                  [Attributes.SOURCE]: analyticsTag,\r\n                }}>\r\n                <BiCommentDetail className=\"rowItemIcon\" /> {item.comments} comments\r\n              </ClickableItem>\r\n            </div>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { useGetHackertNewsArticles } from '../../api/getHackerNewsArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function HackernewsCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { data: articles = [], isLoading, error } = useGetHackertNewsArticles()\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem item={item} key={`hn-${index}`} index={index} analyticsTag={meta.analyticsTag} />\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <ListComponent items={articles} error={error} isLoading={isLoading} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (tag: string): Promise<Article[]> => {\r\n  return axios.get(`/data/v2/hashnode/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetHashnodeArticles = ({ config, tags }: UseGetArticlesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Article[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['hashnode', tag],\r\n        queryFn: () => getArticles(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { CardLink, CardItemWithActions } from 'src/components/Elements'\r\n\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { format } from 'timeago.js'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { ColoredLanguagesBadge } from 'src/components/Elements'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nimport { AiTwotoneHeart } from 'react-icons/ai'\r\nimport { Attributes } from 'src/lib/analytics'\r\n\r\nconst ArticleItem = (props: BaseItemPropsType<Article>) => {\r\n  const { item, index, selectedTag, analyticsTag } = props\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.POINTS]: item.reactions,\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n              [Attributes.LANGUAGE]: selectedTag?.value,\r\n            }}>\r\n            {listingMode === 'compact' && (\r\n              <div className=\"counterWrapper\">\r\n                <AiTwotoneHeart />\r\n                <span className=\"value\">{item.reactions || 0}</span>\r\n              </div>\r\n            )}\r\n            <div className=\"subTitle\">{item.title}</div>\r\n          </CardLink>\r\n\r\n          {listingMode === 'normal' && (\r\n            <>\r\n              <p className=\"rowDescription\">\r\n                <span className=\"rowItem\">\r\n                  <MdAccessTime className={'rowTitleIcon'} />\r\n                  {format(new Date(item.published_at))}\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <BiCommentDetail className={'rowTitleIcon'} />\r\n                  {item.comments || 0} comments\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <AiTwotoneHeart className={'rowTitleIcon'} />\r\n                  {item.reactions || 0} reactions\r\n                </span>\r\n              </p>\r\n              <p className=\"rowDetails\">\r\n                <ColoredLanguagesBadge languages={item.tags.slice(0, 3)} />\r\n              </p>\r\n            </>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetHashnodeArticles } from '../../api/getHashnodeArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function HashnodeCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.hashnodeValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'hashnodeValues')\r\n    }\r\n    return selectedTag.hashnodeValues\r\n  }\r\n\r\n  const results = useGetHashnodeArticles({ tags: getQueryTags() })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results\r\n        .reduce((acc: Article[], curr) => {\r\n          if (!curr.data) return acc\r\n          return [...acc, ...curr.data]\r\n        }, [])\r\n        .sort((a, b) => b.published_at - a.published_at)\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem\r\n      item={item}\r\n      key={`hno-${index}`}\r\n      index={index}\r\n      selectedTag={selectedTag}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        {meta.label}\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['language']} />\r\n      <ListComponent items={getData()} isLoading={getIsLoading()} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQuery } from '@tanstack/react-query'\r\nimport { ExtractFnReturnType, QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (): Promise<Article[]> => {\r\n  return axios.get('/data/v2/indiehackers.json')\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n}\r\n\r\nexport const useGetIndieHackersArticles = ({ config }: UseGetArticlesOptions = {}) => {\r\n  return useQuery<ExtractFnReturnType<QueryFnType>>({\r\n    ...config,\r\n    queryKey: ['indiehackers'],\r\n    queryFn: () => getArticles(),\r\n  })\r\n}\r\n","import { format } from 'timeago.js'\r\nimport { VscTriangleUp } from 'react-icons/vsc'\r\nimport { BiCommentDetail } from 'react-icons/bi'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { FaChevronUp } from 'react-icons/fa'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nexport const ArticleItem = (props: BaseItemPropsType<Article>) => {\r\n  const { item, index, analyticsTag } = props\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      item={item}\r\n      key={item.id}\r\n      cardItem={\r\n        <>\r\n          <p className=\"rowTitle\">\r\n            <CardLink\r\n              link={item.url}\r\n              analyticsAttributes={{\r\n                [Attributes.POINTS]: item.reactions,\r\n                [Attributes.TRIGERED_FROM]: 'card',\r\n                [Attributes.TITLE]: item.title,\r\n                [Attributes.LINK]: item.url,\r\n                [Attributes.SOURCE]: analyticsTag,\r\n              }}>\r\n              {listingMode === 'compact' && (\r\n                <span className=\"counterWrapper\">\r\n                  <VscTriangleUp />\r\n                  <span className=\"value\">{item.reactions}</span>\r\n                </span>\r\n              )}\r\n\r\n              <span className=\"subTitle\">{item.title}</span>\r\n            </CardLink>\r\n          </p>\r\n          {listingMode === 'normal' && (\r\n            <div className=\"rowDetails\">\r\n              <span className=\"rowItem inRowItem\">\r\n                <FaChevronUp className=\"rowItemIcon\" /> {item.reactions} points\r\n              </span>\r\n              <span className=\"rowItem\">\r\n                <MdAccessTime className=\"rowItemIcon\" /> {format(new Date(item.published_at))}\r\n              </span>\r\n              <span className=\"rowItem\">\r\n                <BiCommentDetail className=\"rowItemIcon\" /> {item.comments} comments\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Card } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { useGetIndieHackersArticles } from '../../api/getIndieHackersArticles'\r\nimport { ArticleItem } from './ArticleItem'\r\n\r\nexport function IndiehackersCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { data: articles = [], isLoading, error } = useGetIndieHackersArticles()\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem item={item} key={`ih-${index}`} index={index} analyticsTag={meta.analyticsTag} />\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <ListComponent items={articles} error={error} isLoading={isLoading} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQuery } from '@tanstack/react-query'\r\nimport { ExtractFnReturnType, QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (): Promise<Article[]> => {\r\n  return axios.get('/data/v2/lobsters.json')\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n}\r\n\r\nexport const useGetLobstersArticles = ({ config }: UseGetArticlesOptions = {}) => {\r\n  return useQuery<ExtractFnReturnType<QueryFnType>>({\r\n    ...config,\r\n    queryKey: ['lobsters'],\r\n    queryFn: () => getArticles(),\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { GoDotFill } from 'react-icons/go'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { VscTriangleUp } from 'react-icons/vsc'\r\nimport { CardItemWithActions, CardLink, ClickableItem } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, BaseItemPropsType } from 'src/types'\r\nimport { format } from 'timeago.js'\r\n\r\nconst ArticleItem = ({ item, index, analyticsTag }: BaseItemPropsType<Article>) => {\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      item={item}\r\n      key={index}\r\n      cardItem={\r\n        <>\r\n          <p className=\"rowTitle\">\r\n            <CardLink\r\n              link={item.url}\r\n              analyticsAttributes={{\r\n                [Attributes.POINTS]: item.reactions,\r\n                [Attributes.TRIGERED_FROM]: 'card',\r\n                [Attributes.TITLE]: item.title,\r\n                [Attributes.LINK]: item.url,\r\n                [Attributes.SOURCE]: analyticsTag,\r\n              }}>\r\n              {listingMode === 'compact' && (\r\n                <div className=\"counterWrapper\">\r\n                  <VscTriangleUp />\r\n                  <span className=\"value\">{item.reactions}</span>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"subTitle\">{item.title}</div>\r\n            </CardLink>\r\n          </p>\r\n          {listingMode === 'normal' && (\r\n            <div className=\"rowDetails\">\r\n              <span className=\"rowItem lobstersRowItem\">\r\n                <GoDotFill className=\"rowItemIcon\" /> {item.reactions} points\r\n              </span>\r\n              <span className=\"rowItem\" title={new Date(item.published_at).toUTCString()}>\r\n                <MdAccessTime className=\"rowItemIcon\" /> {format(new Date(item.published_at))}\r\n              </span>\r\n              <ClickableItem\r\n                link={item.comments_url as string}\r\n                className=\"rowItem rowItemClickable\"\r\n                analyticsAttributes={{\r\n                  [Attributes.POINTS]: item.reactions,\r\n                  [Attributes.TRIGERED_FROM]: 'card',\r\n                  [Attributes.TITLE]: `${item.title} comments`,\r\n                  [Attributes.LINK]: item.comments_url,\r\n                  [Attributes.SOURCE]: analyticsTag,\r\n                }}>\r\n                <BiCommentDetail className=\"rowItemIcon\" /> {item.comments} comments\r\n              </ClickableItem>\r\n            </div>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { useGetLobstersArticles } from '../../api/getLobstersArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function LobstersCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { data: articles = [], isLoading, error } = useGetLobstersArticles()\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem item={item} key={`lb-${index}`} index={index} analyticsTag={meta.analyticsTag} />\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <ListComponent items={articles} error={error} isLoading={isLoading} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (tag: string): Promise<Article[]> => {\r\n  return axios.get(`/data/v2/medium/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetMediumArticles = ({ config, tags }: UseGetArticlesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Article[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['medium', tag],\r\n        queryFn: () => getArticles(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { format } from 'timeago.js'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { MdWavingHand } from 'react-icons/md'\r\n\r\nconst ArticleItem = ({ item, index, selectedTag, analyticsTag }: BaseItemPropsType<Article>) => {\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.POINTS]: item.reactions,\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n              [Attributes.LANGUAGE]: selectedTag?.value,\r\n            }}>\r\n            {listingMode === 'compact' && (\r\n              <div className=\"counterWrapper\">\r\n                <MdWavingHand />\r\n                <span className=\"value\">{item.reactions || 0}</span>\r\n              </div>\r\n            )}\r\n            <div className=\"subTitle\">{item.title}</div>\r\n          </CardLink>\r\n\r\n          {listingMode === 'normal' && (\r\n            <p className=\"rowDetails\">\r\n              <span className=\"rowItem mediumRowItem\">\r\n                <MdWavingHand className={'rowItemIcon'} /> {item.reactions || 0} claps\r\n              </span>\r\n              <span className=\"rowItem\">\r\n                <BiCommentDetail className={'rowItemIcon'} /> {item.comments || 0} comments\r\n              </span>\r\n              <span className=\"rowItem\">\r\n                <MdAccessTime className={'rowItemIcon'} />\r\n                {format(new Date(item.published_at))}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetMediumArticles } from '../../api/getMediumArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function MediumCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.mediumValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'mediumValues')\r\n    }\r\n    return selectedTag.mediumValues\r\n  }\r\n\r\n  const results = useGetMediumArticles({ tags: getQueryTags() })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results.reduce((acc: Article[], curr) => {\r\n        if (!curr.data) return acc\r\n        return [...acc, ...curr.data]\r\n      }, [])\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem\r\n      item={item}\r\n      key={`md-${index}`}\r\n      index={index}\r\n      selectedTag={selectedTag}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        {meta.label}\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['language']} />\r\n      <ListComponent items={getData()} isLoading={getIsLoading()} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQuery } from '@tanstack/react-query'\r\nimport { ExtractFnReturnType, QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (): Promise<Article[]> => {\r\n  return axios.get('/data/v2/producthunt.json')\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n}\r\n\r\nexport const useGeProductHuntProducts = ({ config }: UseGetArticlesOptions = {}) => {\r\n  return useQuery<ExtractFnReturnType<QueryFnType>>({\r\n    ...config,\r\n    queryKey: ['producthunt'],\r\n    queryFn: () => getArticles(),\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { VscTriangleUp } from 'react-icons/vsc'\r\nimport { CardLink, CardItemWithActions } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { BaseItemPropsType, Article } from 'src/types'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nconst ArticleItem = ({ item, index, analyticsTag }: BaseItemPropsType<Article>) => {\r\n  const { listingMode } = useUserPreferences()\r\n\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={{ ...item, title: item.title }}\r\n      cardItem={\r\n        <div className=\"phItem\">\r\n          <img className=\"phImage\" src={item.image_url} alt={item.title} />\r\n          <div className=\"phContent\">\r\n            <CardLink\r\n              link={item.url}\r\n              appendRef={false}\r\n              analyticsAttributes={{\r\n                [Attributes.POINTS]: item.reactions,\r\n                [Attributes.TRIGERED_FROM]: 'card',\r\n                [Attributes.TITLE]: item.title,\r\n                [Attributes.LINK]: item.url,\r\n                [Attributes.SOURCE]: analyticsTag,\r\n              }}>\r\n              {item.title}\r\n            </CardLink>\r\n            <p className=\"rowDescription\">{item.description}</p>\r\n\r\n            {listingMode === 'normal' && (\r\n              <p className=\"rowDetails\">\r\n                <span className=\"rowItem\">\r\n                  <BiCommentDetail className=\"rowItemIcon\" /> {item.comments || 0} comments\r\n                </span>\r\n                {item.tags && item.tags.length > 0 ? (\r\n                  <span className=\"rowItem\">{item.tags[0]}</span>\r\n                ) : null}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"phVote\">\r\n            <VscTriangleUp className=\"rowItemIcon\" />\r\n            <span className=\"phVotesCount\">{item.reactions}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { ProductHuntPlaceholder } from 'src/components/placeholders'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { useGeProductHuntProducts } from '../../api/getProductHuntProducts'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function ProductHuntCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const {\r\n    data: products = [],\r\n    isLoading,\r\n    error,\r\n  } = useGeProductHuntProducts({\r\n    config: {\r\n      staleTime: 900000, //15 minutes\r\n      cacheTime: 3600000, // 1 Day\r\n    },\r\n  })\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem item={item} key={`ph-${index}`} index={index} analyticsTag={meta.analyticsTag} />\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <ListComponent\r\n        items={products}\r\n        error={error}\r\n        isLoading={isLoading}\r\n        renderItem={renderItem}\r\n        placeholder={<ProductHuntPlaceholder />}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n","import { useQueries, UseQueryOptions } from '@tanstack/react-query'\r\nimport { QueryConfig } from 'src/lib/react-query'\r\nimport { Article } from 'src/types'\r\nimport { axios } from 'src/lib/axios'\r\n\r\nconst getArticles = async (tag: string): Promise<Article[]> => {\r\n  return axios.get(`/data/v2/reddit/${tag}.json`)\r\n}\r\n\r\ntype QueryFnType = typeof getArticles\r\n\r\ntype UseGetArticlesOptions = {\r\n  config?: QueryConfig<QueryFnType>\r\n  tags: string[]\r\n}\r\n\r\nexport const useGetRedditArticles = ({ config, tags }: UseGetArticlesOptions) => {\r\n  return useQueries({\r\n    queries: tags.map<UseQueryOptions<Article[]>>((tag) => {\r\n      return {\r\n        ...config,\r\n        queryKey: ['reddit', tag],\r\n        queryFn: () => getArticles(tag),\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { BiCommentDetail } from 'react-icons/bi'\r\nimport { BsArrowReturnRight } from 'react-icons/bs'\r\nimport { GoDotFill } from 'react-icons/go'\r\nimport { MdAccessTime } from 'react-icons/md'\r\nimport { VscTriangleUp } from 'react-icons/vsc'\r\nimport { CardItemWithActions, CardLink } from 'src/components/Elements'\r\nimport { Attributes } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, BaseItemPropsType } from 'src/types'\r\nimport { format } from 'timeago.js'\r\n\r\ntype PostFlairPropsType = {\r\n  text: string\r\n  textColor?: string\r\n  bgColor?: string\r\n}\r\n\r\nconst PostFlair = ({ text, bgColor, textColor }: PostFlairPropsType) => {\r\n  const color = textColor === 'light' ? '#fff' : '#000'\r\n  const backgroundColor = bgColor ? bgColor : '#dadada'\r\n  return (\r\n    <div style={{ backgroundColor, color }} className=\"flair\">\r\n      <span>{text}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ArticleItem = ({ item, index, analyticsTag }: BaseItemPropsType<Article>) => {\r\n  const { listingMode } = useUserPreferences()\r\n  return (\r\n    <CardItemWithActions\r\n      source={analyticsTag}\r\n      index={index}\r\n      key={index}\r\n      item={item}\r\n      cardItem={\r\n        <>\r\n          <CardLink\r\n            link={item.url}\r\n            analyticsAttributes={{\r\n              [Attributes.POINTS]: item.reactions,\r\n              [Attributes.TRIGERED_FROM]: 'card',\r\n              [Attributes.TITLE]: item.title,\r\n              [Attributes.LINK]: item.url,\r\n              [Attributes.SOURCE]: analyticsTag,\r\n            }}>\r\n            {listingMode === 'compact' && (\r\n              <div className=\"counterWrapper\">\r\n                <VscTriangleUp />\r\n                <span className=\"value\">{item.reactions}</span>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"subTitle\">\r\n              {item.flair_text && (\r\n                <PostFlair\r\n                  text={item.flair_text}\r\n                  bgColor={item.flair_background_color}\r\n                  textColor={item.flair_text_color}\r\n                />\r\n              )}\r\n              {item.title}\r\n            </div>\r\n          </CardLink>\r\n\r\n          <div className=\"rowDetails\">\r\n            {listingMode === 'normal' && (\r\n              <>\r\n                <span className=\"rowItem redditRowItem\">\r\n                  <GoDotFill className=\"rowItemIcon\" /> {item.reactions} points\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <MdAccessTime className=\"rowItemIcon\" /> {format(new Date(item.published_at))}\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <BiCommentDetail className=\"rowItemIcon\" /> {item.comments} comments\r\n                </span>\r\n                <span className=\"rowItem\">\r\n                  <BsArrowReturnRight className=\"rowItemIcon\" /> {`r/${item.subreddit}`}\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ArticleItem\r\n","import { Card, FloatingFilter, InlineTextFilter } from 'src/components/Elements'\r\nimport { ListComponent } from 'src/components/List'\r\nimport { GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { Article, CardPropsType } from 'src/types'\r\nimport { filterUniqueEntries, getCardTagsValue } from 'src/utils/DataEnhancement'\r\nimport { useGetRedditArticles } from '../../api/getRedditArticles'\r\nimport ArticleItem from './ArticleItem'\r\n\r\nexport function RedditCard(props: CardPropsType) {\r\n  const { meta } = props\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n  const selectedTag =\r\n    [GLOBAL_TAG, MY_LANGUAGES_TAG, ...userSelectedTags].find(\r\n      (lang) => lang.value === cardsSettings?.[meta.value]?.language\r\n    ) || GLOBAL_TAG\r\n\r\n  const getQueryTags = () => {\r\n    if (!selectedTag) {\r\n      return []\r\n    }\r\n\r\n    if (selectedTag.value === MY_LANGUAGES_TAG.redditValues[0]) {\r\n      return getCardTagsValue(userSelectedTags, 'redditValues') || []\r\n    }\r\n    return selectedTag.redditValues || []\r\n  }\r\n\r\n  const results = useGetRedditArticles({ tags: getQueryTags() })\r\n\r\n  const getIsLoading = () => results.some((result) => result.isLoading)\r\n\r\n  const getData = () => {\r\n    return filterUniqueEntries(\r\n      results\r\n        .reduce((acc: Article[], curr) => {\r\n          if (!curr.data) return acc\r\n          return [...acc, ...curr.data]\r\n        }, [])\r\n        .sort((a, b) => b.reactions - a.reactions)\r\n    )\r\n  }\r\n\r\n  const renderItem = (item: Article, index: number) => (\r\n    <ArticleItem\r\n      item={item}\r\n      key={`md-${index}`}\r\n      index={index}\r\n      selectedTag={selectedTag}\r\n      analyticsTag={meta.analyticsTag}\r\n    />\r\n  )\r\n\r\n  const HeaderTitle = () => {\r\n    return (\r\n      <>\r\n        {meta.label}\r\n        <InlineTextFilter\r\n          options={[GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n            label: tag.label,\r\n            value: tag.value,\r\n          }))}\r\n          onChange={(item) => {\r\n            setCardSettings(meta.value, { ...cardsSettings[meta.value], language: item.value })\r\n            trackCardLanguageSelect(meta.analyticsTag, item.value)\r\n          }}\r\n          value={cardsSettings?.[meta.value]?.language}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card titleComponent={<HeaderTitle />} {...props}>\r\n      <FloatingFilter card={meta} filters={['language']} />\r\n      <ListComponent items={getData()} isLoading={getIsLoading()} renderItem={renderItem} />\r\n    </Card>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { FiFilter } from 'react-icons/fi'\r\nimport { BottomSheet } from 'react-spring-bottom-sheet'\r\nimport 'react-spring-bottom-sheet/dist/style.css'\r\nimport { ChipsSet } from 'src/components/Elements'\r\nimport { dateRanges, GLOBAL_TAG, MY_LANGUAGES_TAG } from 'src/config'\r\nimport { trackCardDateRangeSelect, trackCardLanguageSelect } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { SupportedCardType } from 'src/types'\r\n\r\ntype ListingFilterMobileProps = {\r\n  card: SupportedCardType\r\n  filters?: ('datesRange' | 'language')[]\r\n}\r\n\r\nexport const FloatingFilter = ({ card, filters = ['language'] }: ListingFilterMobileProps) => {\r\n  const [open, setOpen] = useState(false)\r\n  const { userSelectedTags, cardsSettings, setCardSettings } = useUserPreferences()\r\n  const [availableTagOptions] = useState(\r\n    [GLOBAL_TAG, ...userSelectedTags, MY_LANGUAGES_TAG].map((tag) => ({\r\n      label: tag.label,\r\n      value: tag.value,\r\n    }))\r\n  )\r\n  return (\r\n    <>\r\n      <button\r\n        className=\"floatingFilter\"\r\n        onClick={() => setOpen(true)}\r\n        style={open ? { display: 'none' } : {}}>\r\n        <FiFilter className=\"floatingFilterIcon\" />\r\n      </button>\r\n\r\n      <BottomSheet\r\n        defaultSnap={({ maxHeight }) => maxHeight / 2}\r\n        open={open}\r\n        expandOnContentDrag={true}\r\n        onDismiss={() => setOpen(false)}>\r\n        <div style={{ padding: '16px' }}>\r\n          <div className=\"settings floatingFilterBottomSheet\">\r\n            <h1 className=\"title\">Customize {card.label}</h1>\r\n\r\n            {filters.includes('language') && (\r\n              <div className=\"settingRow\">\r\n                <p className=\"settingTitle\">Language</p>\r\n                <div className=\"settingContent\">\r\n                  <ChipsSet\r\n                    defaultValues={\r\n                      availableTagOptions\r\n                        .filter((tag) => tag.value === cardsSettings[card.value]?.language)\r\n                        ?.map((tag) => tag.label) || [GLOBAL_TAG.value]\r\n                    }\r\n                    options={availableTagOptions}\r\n                    onChange={(_, option) => {\r\n                      setCardSettings(card.value, {\r\n                        ...cardsSettings[card.value],\r\n                        language: option[0].value,\r\n                      })\r\n                      trackCardLanguageSelect(card.analyticsTag, option[0].value)\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {filters.includes('datesRange') && (\r\n              <div className=\"settingRow\">\r\n                <p className=\"settingTitle\">Date Range</p>\r\n                <div className=\"settingContent\">\r\n                  <ChipsSet\r\n                    defaultValues={\r\n                      dateRanges\r\n                        .filter((date) => date.value === cardsSettings[card.value]?.dateRange)\r\n                        .map((date) => date.value) || dateRanges[0].value\r\n                    }\r\n                    options={dateRanges}\r\n                    onChange={(_, option) => {\r\n                      setCardSettings(card.value, {\r\n                        ...cardsSettings[card.value],\r\n                        dateRange: option[0].value,\r\n                      })\r\n                      trackCardDateRangeSelect(card.analyticsTag, option[0].value)\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </BottomSheet>\r\n    </>\r\n  )\r\n}\r\n","import { Item, Menu, MenuId, animation, useContextMenu } from 'react-contexify'\r\nimport { RiArrowDownSFill } from 'react-icons/ri'\r\n\r\ntype Option = {\r\n  label: string\r\n  value: string\r\n}\r\n\r\ntype DropDownMenuProps = {\r\n  data: Option[]\r\n  tagId: string\r\n  label: string\r\n  setSelectedDropDownItem: (option: Option) => void\r\n}\r\nexport const DropDownMenu = ({\r\n  data,\r\n  tagId,\r\n  label,\r\n  setSelectedDropDownItem,\r\n}: DropDownMenuProps) => {\r\n  const { show: showMenu } = useContextMenu()\r\n\r\n  const displayMenu = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n    const targetId = e.currentTarget.getAttribute('data-target-id')\r\n    if (targetId) {\r\n      showMenu(e, { id: targetId as unknown as MenuId })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button onClick={displayMenu} className=\"headerSelect\" data-target-id={tagId}>\r\n        {label}\r\n        <RiArrowDownSFill className=\"headerSelectIcon\" />\r\n      </button>\r\n      <Menu id={tagId} animation={animation.fade}>\r\n        {data &&\r\n          data.map((tag) => {\r\n            return (\r\n              <Item key={tag.value} onClick={() => setSelectedDropDownItem(tag)}>\r\n                {tag.label}\r\n              </Item>\r\n            )\r\n          })}\r\n      </Menu>\r\n    </>\r\n  )\r\n}\r\n","import { DropDownMenu } from '../../DropDownMenu'\r\n\r\ntype Option = {\r\n  label: string\r\n  value: string\r\n}\r\ntype InlineTextFilterProps = {\r\n  options: Option[]\r\n  value: string | undefined\r\n  onChange: (option: Option) => void\r\n}\r\n\r\nexport const InlineTextFilter = ({ options, value, onChange }: InlineTextFilterProps) => {\r\n  const tagId = `inline-text-filter-${Math.random().toString(16).slice(2)}`\r\n  return (\r\n    <DropDownMenu\r\n      data={options}\r\n      tagId={tagId}\r\n      label={options.find((opt) => opt.value === value)?.label || options[0].label}\r\n      setSelectedDropDownItem={(item: Option) => {\r\n        onChange(item)\r\n      }}\r\n    />\r\n  )\r\n}\r\n"],"names":["ProductHuntPlaceholder","jsxs","jsx","getCardTagsValue","tags","valuesField","acc","curr","filterUniqueEntries","entries","uniqueResults","item","getConferences","tag","axios","useGetConferences","config","useQueries","ConferencesItem","index","analyticsTag","listingMode","useUserPreferences","ConferenceLocation","flag","ConferenceDate","monthNames","startDate","value","endDate","endValue","CardItemWithActions","Fragment","CardLink","Attributes","RiCalendarEventFill","IoIosPin","MdAccessTime","ColoredLanguagesBadge","ConferencesCard","props","meta","userSelectedTags","results","isLoading","result","getData","a","b","renderItem","ConferenceItem","Card","ListComponent","getArticles","useGetDevtoArticles","ArticleItem","selectedTag","AiOutlineLike","format","BiCommentDetail","DevtoCard","cardsSettings","setCardSettings","GLOBAL_TAG","MY_LANGUAGES_TAG","lang","_a","getIsLoading","HeaderTitle","InlineTextFilter","trackCardLanguageSelect","FloatingFilter","useGetFreeCodeCampArticles","FreecodecampCard","getRepos","dateRange","useGetGithubRepos","numberWithCommas","x","RepoItem","VscRepo","VscStarFull","VscRepoForked","GithubCard","knob","selectedDateRange","dateRanges","date","trackCardDateRangeSelect","_b","getError","useGetHackertNewsArticles","useQuery","VscTriangleUp","GoDotFill","ClickableItem","HackernewsCard","articles","error","useGetHashnodeArticles","AiTwotoneHeart","HashnodeCard","useGetIndieHackersArticles","FaChevronUp","IndiehackersCard","useGetLobstersArticles","LobstersCard","useGetMediumArticles","MdWavingHand","MediumCard","useGeProductHuntProducts","ProductHuntCard","products","useGetRedditArticles","PostFlair","text","bgColor","textColor","color","backgroundColor","BsArrowReturnRight","RedditCard","card","filters","open","setOpen","useState","availableTagOptions","FiFilter","BottomSheet","maxHeight","ChipsSet","_","option","DropDownMenu","data","tagId","label","setSelectedDropDownItem","showMenu","useContextMenu","displayMenu","e","targetId","RiArrowDownSFill","Menu","animation","Item","options","onChange","opt"],"mappings":"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"}