{"version":3,"file":"CardsLayout-DM9Ksb-e.js","sources":["../../src/components/Elements/BottomNavigation/BottomNavigation.tsx","../../src/components/Layout/ScrollCardsNavigator.tsx","../../src/providers/DesktopBreakpoint.tsx","../../src/providers/MobileBreakpoint.tsx","../../src/components/Layout/DesktopCards.tsx","../../src/components/Layout/MobileCards.tsx","../../src/components/Layout/CardsLayout.tsx"],"sourcesContent":["import React from 'react'\r\nimport { BsRssFill } from 'react-icons/bs'\r\nimport { SUPPORTED_CARDS } from 'src/config/supportedCards'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { SelectedCard } from 'src/types'\r\n\r\ntype BottomNavigationProps = {\r\n  selectedCard: SelectedCard\r\n  setSelectedCard: (card: SelectedCard) => void\r\n}\r\n\r\nexport const BottomNavigation = ({ selectedCard, setSelectedCard }: BottomNavigationProps) => {\r\n  const { cards, userCustomCards } = useUserPreferences()\r\n  const AVAILABLE_CARDS = [...SUPPORTED_CARDS, ...userCustomCards]\r\n  return (\r\n    <div className=\"bottomNavigation\">\r\n      {cards.map((card) => {\r\n        const constantCard = AVAILABLE_CARDS.find((c) => c.value === card.name)\r\n\r\n        return (\r\n          <button\r\n            key={card.name}\r\n            className={\r\n              'navigationItem ' + (selectedCard && selectedCard.name === card.name ? 'active' : '')\r\n            }\r\n            onClick={() => setSelectedCard(card)}>\r\n            {React.isValidElement(constantCard?.icon) ? (\r\n              constantCard.icon\r\n            ) : typeof constantCard?.icon === 'string' ? (\r\n              <img src={constantCard.icon} alt=\"\" />\r\n            ) : (\r\n              <BsRssFill className=\"rss\" />\r\n            )}\r\n          </button>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react'\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi'\r\nimport { maxCardsPerRow } from 'src/config'\r\nimport { trackPageScroll } from 'src/lib/analytics'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\n\r\nexport const ScrollCardsNavigator = () => {\r\n  const { cards } = useUserPreferences()\r\n  const [leftButtonVisible, setLeftButtonVisible] = useState(false)\r\n  const [rightButtonVisible, setRightButtonVisible] = useState(false)\r\n  const scrollBarContainer = useRef<HTMLElement | null>(null)\r\n  const CARDS = 'Cards'\r\n\r\n  const handleScroll = (e: Event) => {\r\n    const target = e.target as HTMLElement\r\n\r\n    // Prevent scrolling conflicts between CARDS and children\r\n    if (!target.classList.contains(CARDS)) {\r\n      return\r\n    }\r\n\r\n    if (cards.length <= maxCardsPerRow) {\r\n      setLeftButtonVisible(false)\r\n      setRightButtonVisible(false)\r\n    } else {\r\n      const { scrollLeft, scrollWidth, offsetWidth } = target\r\n      setLeftButtonVisible(scrollLeft > 100)\r\n      const scrollRight = scrollWidth - offsetWidth - Math.abs(scrollLeft)\r\n      setRightButtonVisible(scrollRight > 100)\r\n    }\r\n  }\r\n\r\n  const handleKeyboardKeys = useCallback((e: KeyboardEvent) => {\r\n    if (e.key === 'ArrowLeft') {\r\n      scrollTo('left')\r\n    } else if (e.key === 'ArrowRight') {\r\n      scrollTo('right')\r\n    }\r\n  }, [])\r\n\r\n  useLayoutEffect(() => {\r\n    scrollBarContainer.current = document.querySelector(`.${CARDS}`)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    scrollBarContainer.current?.addEventListener('scroll', handleScroll, true)\r\n    window.addEventListener('keydown', handleKeyboardKeys)\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyboardKeys)\r\n      scrollBarContainer.current?.removeEventListener('scroll', handleScroll)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [handleKeyboardKeys])\r\n\r\n  useEffect(() => {\r\n    setRightButtonVisible(cards.length > maxCardsPerRow)\r\n  }, [cards])\r\n\r\n  const scrollTo = (direction: 'left' | 'right') => {\r\n    if (!scrollBarContainer.current) {\r\n      return\r\n    }\r\n    trackPageScroll(direction)\r\n    const { scrollLeft } = scrollBarContainer.current\r\n    const { offsetWidth } = scrollBarContainer.current?.firstChild?.firstChild as HTMLElement\r\n    const position = direction === 'left' ? scrollLeft - offsetWidth : scrollLeft + offsetWidth\r\n\r\n    scrollBarContainer.current.scrollTo({\r\n      left: position,\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"scrollCardsNavigator\">\r\n      {leftButtonVisible && (\r\n        <button\r\n          aria-label=\"Previous cards\"\r\n          className=\"scrollButton\"\r\n          onClick={() => scrollTo('left')}\r\n          style={{ left: 0 }}>\r\n          <FiChevronLeft size={32} />\r\n        </button>\r\n      )}\r\n      {rightButtonVisible && (\r\n        <button\r\n          aria-label=\"Next cards\"\r\n          className=\"scrollButton\"\r\n          onClick={() => scrollTo('right')}\r\n          style={{ right: 0 }}>\r\n          <FiChevronRight size={32} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { useMediaQuery } from 'react-responsive'\r\n\r\nexport const DesktopBreakpoint = ({ children }: { children: React.ReactNode }) => {\r\n  const isDesktop = useMediaQuery({ minWidth: 768 })\r\n  return isDesktop ? children : null\r\n}\r\n","import { useMediaQuery } from 'react-responsive'\r\n\r\nexport const MobileBreakpoint = ({ children }: { children: React.ReactNode }) => {\r\n  const isMobile = useMediaQuery({ maxWidth: 767 })\r\n  return isMobile ? children : null\r\n}\r\n","import { useEffect, useMemo, useRef } from 'react'\r\n//import SortableList, { SortableItem } from 'react-easy-sort'\r\nimport {\r\n  DndContext,\r\n  DragEndEvent,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from '@dnd-kit/core'\r\nimport {\r\n  horizontalListSortingStrategy,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n} from '@dnd-kit/sortable'\r\nimport { CSS } from '@dnd-kit/utilities'\r\nimport { clsx } from 'clsx'\r\nimport { MdOutlineDragIndicator } from 'react-icons/md'\r\nimport { SUPPORTED_CARDS } from 'src/config/supportedCards'\r\nimport { CustomRssCard } from 'src/features/cards'\r\nimport { useRemoteConfigStore } from 'src/features/remoteConfig'\r\nimport { trackPageDrag } from 'src/lib/analytics'\r\nimport { DesktopBreakpoint } from 'src/providers/DesktopBreakpoint'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { SelectedCard, SupportedCardType } from 'src/types'\r\n\r\ntype SortableItemProps = {\r\n  id: string\r\n  card: SupportedCardType\r\n}\r\n\r\nconst SortableItem = ({ id, card }: SortableItemProps) => {\r\n  const { attributes, listeners, setNodeRef, isDragging, transform, transition } = useSortable({\r\n    id,\r\n  })\r\n  const { isOrganizeMode } = useUserPreferences()\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  }\r\n\r\n  const Component = card.component || CustomRssCard\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style} className={clsx(isOrganizeMode && 'grid-item')}>\r\n      <Component\r\n        meta={card}\r\n        className={clsx(isDragging && 'draggedBlock', isOrganizeMode && 'organize-item')}\r\n        knob={\r\n          <DesktopBreakpoint>\r\n            <button className=\"blockHeaderDragButton\" {...attributes} {...listeners}>\r\n              <MdOutlineDragIndicator />\r\n            </button>\r\n          </DesktopBreakpoint>\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const DesktopCards = ({\r\n  cards,\r\n  userCustomCards,\r\n}: {\r\n  cards: SelectedCard[]\r\n  userCustomCards: SupportedCardType[]\r\n}) => {\r\n  const AVAILABLE_CARDS = [...SUPPORTED_CARDS, ...userCustomCards]\r\n  const { updateCardOrder, isOrganizeMode, setIsOrganizeMode, setCards } = useUserPreferences()\r\n  const cardsWrapperRef = useRef<HTMLDivElement>(null)\r\n  const { adsConfig } = useRemoteConfigStore()\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  )\r\n\r\n  const handleDragStart = () => {\r\n    cardsWrapperRef.current?.classList.add('snapDisabled')\r\n  }\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event\r\n\r\n    if (active.id !== over?.id) {\r\n      // Find the indices of the dragged items in the cards array\r\n      const oldIndex = cards.findIndex((card) => card.name === active.id)\r\n      const newIndex = cards.findIndex((card) => card.name === over?.id)\r\n\r\n      if (oldIndex !== -1 && newIndex !== -1) {\r\n        // Update the card order using the store action\r\n        updateCardOrder(oldIndex, newIndex)\r\n        trackPageDrag()\r\n      }\r\n    }\r\n\r\n    cardsWrapperRef.current?.classList.remove('snapDisabled')\r\n  }\r\n\r\n  // Custom auto-scroll function\r\n  const handleDragMove = (event: any) => {\r\n    if (!cardsWrapperRef.current) return\r\n\r\n    const container = cardsWrapperRef.current\r\n    const { clientX } = event\r\n    const { left, right, width } = container.getBoundingClientRect()\r\n\r\n    // Calculate edge thresholds (10% of container width)\r\n    const threshold = width * 0.1\r\n    const leftEdge = left + threshold\r\n    const rightEdge = right - threshold\r\n\r\n    // Scroll speed based on distance from edge\r\n    const scrollSpeed = 10\r\n\r\n    if (clientX < leftEdge) {\r\n      // Scroll left\r\n      const intensity = (leftEdge - clientX) / threshold\r\n      container.scrollBy({ left: -scrollSpeed * intensity, behavior: 'smooth' })\r\n    } else if (clientX > rightEdge) {\r\n      // Scroll right\r\n      const intensity = (clientX - rightEdge) / threshold\r\n      container.scrollBy({ left: scrollSpeed * intensity, behavior: 'smooth' })\r\n    }\r\n  }\r\n\r\n  const memoCards = useMemo(() => {\r\n    return cards\r\n      .map((card) => {\r\n        const constantCard = AVAILABLE_CARDS.find((c) => c.value === card.name)\r\n        if (!constantCard) {\r\n          return null\r\n        }\r\n\r\n        return {\r\n          card: constantCard,\r\n          id: card.name, // Use card name as ID instead of card.id\r\n        }\r\n      })\r\n      .filter(Boolean) as { id: string; card: SupportedCardType }[]\r\n  }, [cards])\r\n\r\n  // Exit organize mode when pressing ESC key\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && isOrganizeMode) {\r\n        setIsOrganizeMode(false)\r\n        document.documentElement.classList.remove('organizeMode')\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', handleKeyDown)\r\n    return () => window.removeEventListener('keydown', handleKeyDown)\r\n  }, [isOrganizeMode, setIsOrganizeMode])\r\n\r\n  // Handle exit organize mode\r\n  const handleExitOrganizeMode = () => {\r\n    setIsOrganizeMode(false)\r\n    document.documentElement.classList.remove('organizeMode')\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={cardsWrapperRef}\r\n      className={clsx('Cards', 'HorizontalScroll', isOrganizeMode && 'grid-layout')}>\r\n      {isOrganizeMode && (\r\n        <div className=\"organize-mode-header\">\r\n          <h2>Organize Cards</h2>\r\n          <p>Drag and drop cards to reorder them. Press ESC to exit.</p>\r\n          <button className=\"exit-organize-mode\" onClick={handleExitOrganizeMode}>\r\n            Exit Organize Mode\r\n          </button>\r\n        </div>\r\n      )}\r\n      <DndContext\r\n        sensors={sensors}\r\n        autoScroll={true}\r\n        onDragEnd={handleDragEnd}\r\n        onDragStart={handleDragStart}\r\n        onDragMove={handleDragMove}>\r\n        <SortableContext\r\n          items={memoCards.map(({ id }) => id)}\r\n          strategy={horizontalListSortingStrategy}>\r\n          {memoCards.map(({ id, card }, index) => {\r\n            return <SortableItem key={id} id={id} card={card} />\r\n          })}\r\n        </SortableContext>\r\n      </DndContext>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { SUPPORTED_CARDS } from 'src/config/supportedCards'\r\nimport { CustomRssCard } from 'src/features/cards'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { SelectedCard } from 'src/types'\r\n\r\nexport const MobileCards = ({ selectedCard }: { selectedCard: SelectedCard }) => {\r\n  const { userCustomCards } = useUserPreferences()\r\n  const currentCard = [...SUPPORTED_CARDS, ...userCustomCards].find(\r\n    (c) => c.value === selectedCard.name\r\n  )\r\n\r\n  return currentCard\r\n    ? React.createElement(currentCard?.component || CustomRssCard, {\r\n        key: currentCard.value,\r\n        meta: currentCard,\r\n      })\r\n    : null\r\n}\r\n","import { useState } from 'react'\r\nimport { DesktopBreakpoint } from 'src/providers/DesktopBreakpoint'\r\nimport { MobileBreakpoint } from 'src/providers/MobileBreakpoint'\r\nimport { useUserPreferences } from 'src/stores/preferences'\r\nimport { BottomNavigation } from '../Elements'\r\nimport { DesktopCards } from './DesktopCards'\r\nimport { MobileCards } from './MobileCards'\r\nimport { ScrollCardsNavigator } from './ScrollCardsNavigator'\r\n\r\nexport const CardsLayout = () => {\r\n  const { cards, userCustomCards } = useUserPreferences()\r\n  const [selectedCard, setSelectedCard] = useState(cards[0])\r\n  return (\r\n    <>\r\n      <ScrollCardsNavigator />\r\n      <DesktopBreakpoint>\r\n        <DesktopCards cards={cards} userCustomCards={userCustomCards} />\r\n      </DesktopBreakpoint>\r\n      <MobileBreakpoint>\r\n        <div className=\"Cards HorizontalScroll\">\r\n          <MobileCards selectedCard={selectedCard} />\r\n        </div>\r\n      </MobileBreakpoint>\r\n      <BottomNavigation selectedCard={selectedCard} setSelectedCard={setSelectedCard} />\r\n    </>\r\n  )\r\n}\r\n"],"names":["BottomNavigation","selectedCard","setSelectedCard","cards","userCustomCards","useUserPreferences","AVAILABLE_CARDS","SUPPORTED_CARDS","card","constantCard","c","jsx","React","BsRssFill","ScrollCardsNavigator","leftButtonVisible","setLeftButtonVisible","useState","rightButtonVisible","setRightButtonVisible","scrollBarContainer","useRef","CARDS","handleScroll","e","target","maxCardsPerRow","scrollLeft","scrollWidth","offsetWidth","scrollRight","handleKeyboardKeys","useCallback","scrollTo","useLayoutEffect","useEffect","_a","direction","trackPageScroll","_b","position","jsxs","FiChevronLeft","FiChevronRight","DesktopBreakpoint","children","useMediaQuery","MobileBreakpoint","SortableItem","id","attributes","listeners","setNodeRef","isDragging","transform","transition","useSortable","isOrganizeMode","style","CSS","Component","CustomRssCard","clsx","MdOutlineDragIndicator","DesktopCards","updateCardOrder","setIsOrganizeMode","setCards","cardsWrapperRef","adsConfig","useRemoteConfigStore","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","handleDragStart","handleDragEnd","event","active","over","oldIndex","newIndex","trackPageDrag","handleDragMove","container","clientX","left","right","width","threshold","leftEdge","rightEdge","scrollSpeed","intensity","memoCards","useMemo","handleKeyDown","handleExitOrganizeMode","DndContext","SortableContext","horizontalListSortingStrategy","index","MobileCards","currentCard","CardsLayout","Fragment"],"mappings":"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"}